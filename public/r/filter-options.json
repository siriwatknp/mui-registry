{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "filter-options",
  "type": "registry:component",
  "title": "Filter Options",
  "description": "Multi-select amenity filter component with chips and show more functionality",
  "dependencies": [
    "@mui/material",
    "@mui/icons-material",
    "@emotion/react",
    "@emotion/styled"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/new-york/components/filter-options/filter-options.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Chip from \"@mui/material/Chip\";\nimport Stack from \"@mui/material/Stack\";\nimport Typography from \"@mui/material/Typography\";\nimport CheckIcon from \"@mui/icons-material/Check\";\n\nexport interface FilterOption {\n  id: string;\n  label: string;\n  selected?: boolean;\n}\n\nexport interface FilterOptionsProps {\n  title?: string;\n  subtitle?: string;\n  options: FilterOption[];\n  showMoreCount?: number;\n  onSelectionChange?: (selectedIds: string[]) => void;\n}\n\nexport function FilterOptions({ \n  title = \"Amenities\",\n  subtitle = \"Essentials\", \n  options = [],\n  showMoreCount = 6,\n  onSelectionChange\n}: FilterOptionsProps) {\n  const [selectedIds, setSelectedIds] = React.useState<string[]>(\n    options.filter(option => option.selected).map(option => option.id)\n  );\n  const [showAll, setShowAll] = React.useState(false);\n\n  const visibleOptions = showAll ? options : options.slice(0, showMoreCount);\n  const hiddenCount = Math.max(0, options.length - showMoreCount);\n\n  const handleChipClick = React.useCallback((optionId: string) => {\n    setSelectedIds(prev => {\n      const newSelection = prev.includes(optionId)\n        ? prev.filter(id => id !== optionId)\n        : [...prev, optionId];\n      \n      onSelectionChange?.(newSelection);\n      return newSelection;\n    });\n  }, [onSelectionChange]);\n\n  const handleShowMoreClick = React.useCallback(() => {\n    setShowAll(prev => !prev);\n  }, []);\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Typography variant=\"h5\" component=\"h2\" sx={{ mb: 1, fontWeight: 600 }}>\n        {title}\n      </Typography>\n      \n      <Typography \n        variant=\"body1\" \n        color=\"text.secondary\" \n        sx={{ mb: 2 }}\n      >\n        {subtitle}\n      </Typography>\n\n      <Box \n        sx={{ \n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: 1.5,\n          mb: hiddenCount > 0 ? 2 : 0,\n          maxWidth: \"600px\",\n          rowGap: 1.5\n        }}\n      >\n        {visibleOptions.map((option) => {\n          const isSelected = selectedIds.includes(option.id);\n          \n          return (\n            <Chip\n              key={option.id}\n              label={option.label}\n              icon={isSelected ? <CheckIcon /> : undefined}\n              onClick={() => handleChipClick(option.id)}\n              variant={isSelected ? \"filled\" : \"outlined\"}\n              sx={theme => ({\n                borderRadius: 8,\n                height: 44,\n                fontSize: \"0.875rem\",\n                fontWeight: 500,\n                \"& .MuiChip-label\": {\n                  px: 2,\n                  py: 1,\n                },\n                \"& .MuiChip-icon\": {\n                  fontSize: \"1rem\",\n                  ml: 1.5,\n                  mr: 0.5,\n                },\n                \"&:focus-visible\": {\n                  outline: `2px solid ${(theme.vars || theme).palette.primary.main}`,\n                  outlineOffset: 2,\n                },\n                ...(!isSelected && {\n                  bgcolor: \"background.paper\",\n                  borderColor: \"divider\",\n                  color: \"text.secondary\",\n                  \"&:hover\": {\n                    bgcolor: \"action.hover\",\n                    borderColor: \"text.secondary\",\n                  },\n                }),\n                ...(isSelected && {\n                  bgcolor: \"#1a1a1a\",\n                  color: \"white\",\n                  border: \"1px solid #1a1a1a\",\n                  \"& .MuiChip-icon\": {\n                    color: \"white\",\n                  },\n                  \"&:hover\": {\n                    bgcolor: \"#2a2a2a\",\n                  },\n                  ...theme.applyStyles(\"dark\", {\n                    bgcolor: \"white\",\n                    color: \"#1a1a1a\",\n                    border: \"1px solid white\",\n                    \"& .MuiChip-icon\": {\n                      color: \"#1a1a1a\",\n                    },\n                    \"&:hover\": {\n                      bgcolor: \"#f5f5f5\",\n                    },\n                  }),\n                }),\n              })}\n            />\n          );\n        })}\n      </Box>\n\n      {hiddenCount > 0 && (\n        <Button\n          variant=\"text\"\n          onClick={handleShowMoreClick}\n          sx={{\n            textTransform: \"none\",\n            fontWeight: 400,\n            p: 0,\n            minWidth: \"auto\",\n            justifyContent: \"flex-start\",\n            color: \"primary.main\",\n            \"&:hover\": {\n              bgcolor: \"transparent\",\n              textDecoration: \"underline\",\n            },\n          }}\n        >\n          {showAll ? \"Show less...\" : `Show more...`}\n        </Button>\n      )}\n    </Box>\n  );\n}",
      "type": "registry:component"
    }
  ],
  "meta": {
    "screenshot": "/screenshots/filter-options.png"
  }
}